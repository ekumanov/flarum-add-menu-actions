{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCAnBF,OAAOC,KAAKC,OAAO,mCAAxD,MCAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCIxDC,IAAAA,aAAiBC,IAAI,oCAAoC,YCEvDC,EAAAA,EAAAA,QAAOC,IAAoB,gBAAgB,SAAUC,EAAOC,EAAYC,GACtE,GAAIN,IAAIO,QAAQC,KAAM,CACpB,IAAIC,EAAeT,IAAIU,QAAQtB,IAAI,aACnC,GAAqB,UAAjBqB,GAA6C,cAAjBA,EAA8B,CAC5D,GAAIJ,EAAWM,WAAY,OAE3B,IAAIC,EAASP,EAAWO,SAExBR,EAAMH,IACJ,aACAY,IAAAA,UACE,CACEC,KAAMF,EAAS,sBAAwB,sBACvCG,QAAS,WACHH,EACFP,EAAWW,KAAK,CAAEC,mBAAoB,KAAMC,QAAQ,IAEpDb,EAAWW,KAAK,CAAEC,mBAAoBZ,EAAWc,kBAErD,GAEFnB,IAAIoB,WAAWC,MACbT,EAAS,qDAAuD,qDAIxE,CACF,CACF,KC5BAV,EAAAA,EAAAA,QAAOC,IAAoB,gBAAgB,SAAUC,EAAOC,EAAYC,GACtE,GAAIN,IAAIO,QAAQC,KAAM,CACpB,IAAIC,EAAeT,IAAIU,QAAQtB,IAAI,aAEnC,GAAqB,UAAjBqB,GAA6C,cAAjBA,EAA8B,CAC5D,GAAIJ,EAAWM,WAAY,OAE3B,IAAMW,EAAejB,EAAWiB,eAEhClB,EAAMH,IACJ,SACAY,IAAAA,UACE,CACEC,KAAuB,WAAjBQ,EAA4B,aAAe,mBACjDP,QAAS,WACPV,EAAWW,KAAK,CACdM,aAA+B,WAAjBA,EAA4B,KAAO,UAErD,GAEFtB,IAAIoB,WAAWC,MACI,WAAjBC,EACI,iEACA,kDAIZ,CACF,CACF,GF5BF,G","sources":["webpack://@ekumanov/flarum-add-menu-actions/webpack/bootstrap","webpack://@ekumanov/flarum-add-menu-actions/webpack/runtime/compat get default export","webpack://@ekumanov/flarum-add-menu-actions/webpack/runtime/define property getters","webpack://@ekumanov/flarum-add-menu-actions/webpack/runtime/hasOwnProperty shorthand","webpack://@ekumanov/flarum-add-menu-actions/webpack/runtime/make namespace object","webpack://@ekumanov/flarum-add-menu-actions/external root \"flarum.core.compat['forum/app']\"","webpack://@ekumanov/flarum-add-menu-actions/external root \"flarum.core.compat['common/extend']\"","webpack://@ekumanov/flarum-add-menu-actions/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@ekumanov/flarum-add-menu-actions/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@ekumanov/flarum-add-menu-actions/external root \"flarum.core.compat['common/components/Button']\"","webpack://@ekumanov/flarum-add-menu-actions/./src/forum/index.js","webpack://@ekumanov/flarum-add-menu-actions/./src/forum/addMarkAsReadControls.js","webpack://@ekumanov/flarum-add-menu-actions/./src/forum/addIgnoreControls.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/forum/app';\nimport addIgnoreControls from './addIgnoreControls';\nimport addMarkAsReadControls from './addMarkAsReadControls';\n\napp.initializers.add('ekumanov/flarum-add-menu-actions', () => {\n  addMarkAsReadControls();\n  addIgnoreControls();\n});\n","import { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addMarkAsReadControls() {\n  extend(DiscussionControls, 'userControls', function (items, discussion, context) {\n    if (app.session.user) {\n      let currentRoute = app.current.get('routeName');\n      if (currentRoute === 'index' || currentRoute === 'following') {\n        if (discussion.isHidden()) return;\n\n        let isRead = discussion.isRead();\n\n        items.add(\n          'markAsRead',\n          Button.component(\n            {\n              icon: isRead ? 'fas fa-check-circle' : 'far fa-check-circle',\n              onclick: () => {\n                if (isRead) {\n                  discussion.save({ lastReadPostNumber: null, unread: true });\n                } else {\n                  discussion.save({ lastReadPostNumber: discussion.lastPostNumber() });\n                }\n              },\n            },\n            app.translator.trans(\n              isRead ? 'ekumanov-flarum-add-menu-actions.forum.mark_unread' : 'ekumanov-flarum-add-menu-actions.forum.mark_read'\n            )\n          )\n        );\n      }\n    }\n  });\n}\n","import { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addIgnoreControls() {\n  extend(DiscussionControls, 'userControls', function (items, discussion, context) {\n    if (app.session.user) {\n      let currentRoute = app.current.get('routeName');\n\n      if (currentRoute === 'index' || currentRoute === 'following') {\n        if (discussion.isHidden()) return;\n\n        const subscription = discussion.subscription();\n\n        items.add(\n          'ignore',\n          Button.component(\n            {\n              icon: subscription === 'ignore' ? 'fas fa-eye' : 'far fa-eye-slash',\n              onclick: () => {\n                discussion.save({\n                  subscription: subscription === 'ignore' ? null : 'ignore',\n                });\n              },\n            },\n            app.translator.trans(\n              subscription === 'ignore'\n                ? 'flarum-subscriptions.forum.discussion_controls.unignore_button'\n                : 'ekumanov-flarum-add-menu-actions.forum.ignore'\n            )\n          )\n        );\n      }\n    }\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","add","extend","DiscussionControls","items","discussion","context","session","user","currentRoute","current","isHidden","isRead","Button","icon","onclick","save","lastReadPostNumber","unread","lastPostNumber","translator","trans","subscription"],"sourceRoot":""}